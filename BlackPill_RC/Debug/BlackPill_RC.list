
BlackPill_RC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a8c  08000a94  00010a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a8c  08000a8c  00010a94  2**0
                  CONTENTS
  4 .ARM          00000000  08000a8c  08000a8c  00010a94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a8c  08000a94  00010a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a8c  08000a8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000000  08000a94  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08000a94  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a94  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ac4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001428  00000000  00000000  00010b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000838  00000000  00000000  00011f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  00012768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001dd  00000000  00000000  00012a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000824  00000000  00000000  00012bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012bf  00000000  00000000  00013401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000049d1  00000000  00000000  000146c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008ac  00000000  00000000  00019094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00019940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a74 	.word	0x08000a74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000a74 	.word	0x08000a74

080001d4 <EXTI0_IRQHandler>:
		GLOBAL_EXTIPtr[Copy_u8InterruptNo]=ptr;
	}
}


void EXTI0_IRQHandler(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[0]();
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI0_IRQHandler+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4798      	blx	r3
	EXTI->PR |= 1;
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6153      	str	r3, [r2, #20]
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	40013c00 	.word	0x40013c00

080001f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[1]();
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <EXTI1_IRQHandler+0x1c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4798      	blx	r3
	EXTI->PR |= 1<<1;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6153      	str	r3, [r2, #20]
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000001c 	.word	0x2000001c
 8000218:	40013c00 	.word	0x40013c00

0800021c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[2]();
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <EXTI2_IRQHandler+0x1c>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4798      	blx	r3
	EXTI->PR |= 1<<2;
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <EXTI2_IRQHandler+0x20>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a04      	ldr	r2, [pc, #16]	; (800023c <EXTI2_IRQHandler+0x20>)
 800022c:	f043 0304 	orr.w	r3, r3, #4
 8000230:	6153      	str	r3, [r2, #20]
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000001c 	.word	0x2000001c
 800023c:	40013c00 	.word	0x40013c00

08000240 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[3]();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <EXTI3_IRQHandler+0x1c>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4798      	blx	r3
	EXTI->PR |= 1<<3;
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <EXTI3_IRQHandler+0x20>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <EXTI3_IRQHandler+0x20>)
 8000250:	f043 0308 	orr.w	r3, r3, #8
 8000254:	6153      	str	r3, [r2, #20]
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000001c 	.word	0x2000001c
 8000260:	40013c00 	.word	0x40013c00

08000264 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[4]();
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI4_IRQHandler+0x1c>)
 800026a:	691b      	ldr	r3, [r3, #16]
 800026c:	4798      	blx	r3
	EXTI->PR |= 1<<4;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <EXTI4_IRQHandler+0x20>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <EXTI4_IRQHandler+0x20>)
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6153      	str	r3, [r2, #20]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000001c 	.word	0x2000001c
 8000284:	40013c00 	.word	0x40013c00

08000288 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	if((GET_BIT(EXTI->PR,EXTI5)==1)&(GLOBAL_EXTIPtr[EXTI5]!=STD_NULL)){
 800028c:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	095b      	lsrs	r3, r3, #5
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	2b01      	cmp	r3, #1
 8000298:	bf0c      	ite	eq
 800029a:	2301      	moveq	r3, #1
 800029c:	2300      	movne	r3, #0
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	4013      	ands	r3, r2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d009      	beq.n	80002ca <EXTI9_5_IRQHandler+0x42>
			GLOBAL_EXTIPtr[EXTI5]();
 80002b6:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI5;
 80002bc:	4b41      	ldr	r3, [pc, #260]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a40      	ldr	r2, [pc, #256]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6153      	str	r3, [r2, #20]
		}
	else if((GET_BIT(EXTI->PR,EXTI9)==1)&(GLOBAL_EXTIPtr[EXTI9]!=STD_NULL)){
			GLOBAL_EXTIPtr[EXTI9]();
			EXTI->PR |= 1<<EXTI9;
		}
}
 80002c8:	e07a      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI6)==1)&(GLOBAL_EXTIPtr[EXTI6]!=STD_NULL)){
 80002ca:	4b3e      	ldr	r3, [pc, #248]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	099b      	lsrs	r3, r3, #6
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	bf0c      	ite	eq
 80002d8:	2301      	moveq	r3, #1
 80002da:	2300      	movne	r3, #0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b3a      	ldr	r3, [pc, #232]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2301      	movne	r3, #1
 80002e8:	2300      	moveq	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4013      	ands	r3, r2
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d009      	beq.n	8000308 <EXTI9_5_IRQHandler+0x80>
			GLOBAL_EXTIPtr[EXTI6]();
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI6;
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a31      	ldr	r2, [pc, #196]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000304:	6153      	str	r3, [r2, #20]
}
 8000306:	e05b      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI7)==1)&(GLOBAL_EXTIPtr[EXTI7]!=STD_NULL)){
 8000308:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	09db      	lsrs	r3, r3, #7
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	2b01      	cmp	r3, #1
 8000314:	bf0c      	ite	eq
 8000316:	2301      	moveq	r3, #1
 8000318:	2300      	movne	r3, #0
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf14      	ite	ne
 8000324:	2301      	movne	r3, #1
 8000326:	2300      	moveq	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d009      	beq.n	8000346 <EXTI9_5_IRQHandler+0xbe>
			GLOBAL_EXTIPtr[EXTI7]();
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI7;
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a21      	ldr	r2, [pc, #132]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000342:	6153      	str	r3, [r2, #20]
}
 8000344:	e03c      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI8)==1)&(GLOBAL_EXTIPtr[EXTI8]!=STD_NULL)){
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	0a1b      	lsrs	r3, r3, #8
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b01      	cmp	r3, #1
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 800035c:	6a1b      	ldr	r3, [r3, #32]
 800035e:	2b00      	cmp	r3, #0
 8000360:	bf14      	ite	ne
 8000362:	2301      	movne	r3, #1
 8000364:	2300      	moveq	r3, #0
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4013      	ands	r3, r2
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d009      	beq.n	8000384 <EXTI9_5_IRQHandler+0xfc>
			GLOBAL_EXTIPtr[EXTI8]();
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI8;
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000380:	6153      	str	r3, [r2, #20]
}
 8000382:	e01d      	b.n	80003c0 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI9)==1)&(GLOBAL_EXTIPtr[EXTI9]!=STD_NULL)){
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	0a5b      	lsrs	r3, r3, #9
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	2b01      	cmp	r3, #1
 8000390:	bf0c      	ite	eq
 8000392:	2301      	moveq	r3, #1
 8000394:	2300      	movne	r3, #0
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 800039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039c:	2b00      	cmp	r3, #0
 800039e:	bf14      	ite	ne
 80003a0:	2301      	movne	r3, #1
 80003a2:	2300      	moveq	r3, #0
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4013      	ands	r3, r2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d008      	beq.n	80003c0 <EXTI9_5_IRQHandler+0x138>
			GLOBAL_EXTIPtr[EXTI9]();
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <EXTI9_5_IRQHandler+0x140>)
 80003b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b2:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI9;
 80003b4:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a02      	ldr	r2, [pc, #8]	; (80003c4 <EXTI9_5_IRQHandler+0x13c>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6153      	str	r3, [r2, #20]
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40013c00 	.word	0x40013c00
 80003c8:	2000001c 	.word	0x2000001c

080003cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if((GET_BIT(EXTI->PR,EXTI10)==1)&(GLOBAL_EXTIPtr[EXTI10]!=STD_NULL)){
 80003d0:	4b5d      	ldr	r3, [pc, #372]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	0a9b      	lsrs	r3, r3, #10
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	2b01      	cmp	r3, #1
 80003dc:	bf0c      	ite	eq
 80003de:	2301      	moveq	r3, #1
 80003e0:	2300      	movne	r3, #0
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b59      	ldr	r3, [pc, #356]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80003e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	bf14      	ite	ne
 80003ec:	2301      	movne	r3, #1
 80003ee:	2300      	moveq	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	4013      	ands	r3, r2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d009      	beq.n	800040e <EXTI15_10_IRQHandler+0x42>
			GLOBAL_EXTIPtr[EXTI10]();
 80003fa:	4b54      	ldr	r3, [pc, #336]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80003fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003fe:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI10;
 8000400:	4b51      	ldr	r3, [pc, #324]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a50      	ldr	r2, [pc, #320]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800040a:	6153      	str	r3, [r2, #20]
		}
	else if((GET_BIT(EXTI->PR,EXTI15)==1)&(GLOBAL_EXTIPtr[EXTI15]!=STD_NULL)){
		GLOBAL_EXTIPtr[EXTI15]();
		EXTI->PR |= 1<<EXTI15;
	}
}
 800040c:	e099      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI11)==1)&(GLOBAL_EXTIPtr[EXTI11]!=STD_NULL)){
 800040e:	4b4e      	ldr	r3, [pc, #312]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	0adb      	lsrs	r3, r3, #11
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b01      	cmp	r3, #1
 800041a:	bf0c      	ite	eq
 800041c:	2301      	moveq	r3, #1
 800041e:	2300      	movne	r3, #0
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b4a      	ldr	r3, [pc, #296]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf14      	ite	ne
 800042a:	2301      	movne	r3, #1
 800042c:	2300      	moveq	r3, #0
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4013      	ands	r3, r2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <EXTI15_10_IRQHandler+0x80>
			GLOBAL_EXTIPtr[EXTI11]();
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 800043a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043c:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI11;
 800043e:	4b42      	ldr	r3, [pc, #264]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a41      	ldr	r2, [pc, #260]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000448:	6153      	str	r3, [r2, #20]
}
 800044a:	e07a      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI12)==1)&(GLOBAL_EXTIPtr[EXTI12]!=STD_NULL)){
 800044c:	4b3e      	ldr	r3, [pc, #248]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	0b1b      	lsrs	r3, r3, #12
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	2b01      	cmp	r3, #1
 8000458:	bf0c      	ite	eq
 800045a:	2301      	moveq	r3, #1
 800045c:	2300      	movne	r3, #0
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b3a      	ldr	r3, [pc, #232]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	2b00      	cmp	r3, #0
 8000466:	bf14      	ite	ne
 8000468:	2301      	movne	r3, #1
 800046a:	2300      	moveq	r3, #0
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4013      	ands	r3, r2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d009      	beq.n	800048a <EXTI15_10_IRQHandler+0xbe>
			GLOBAL_EXTIPtr[EXTI12]();
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI12;
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a31      	ldr	r2, [pc, #196]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000486:	6153      	str	r3, [r2, #20]
}
 8000488:	e05b      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI13)==1)&(GLOBAL_EXTIPtr[EXTI13]!=STD_NULL)){
 800048a:	4b2f      	ldr	r3, [pc, #188]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	0b5b      	lsrs	r3, r3, #13
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	2b01      	cmp	r3, #1
 8000496:	bf0c      	ite	eq
 8000498:	2301      	moveq	r3, #1
 800049a:	2300      	movne	r3, #0
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d009      	beq.n	80004c8 <EXTI15_10_IRQHandler+0xfc>
			GLOBAL_EXTIPtr[EXTI13]();
 80004b4:	4b25      	ldr	r3, [pc, #148]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b8:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI13;
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a22      	ldr	r2, [pc, #136]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c4:	6153      	str	r3, [r2, #20]
}
 80004c6:	e03c      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI14)==1)&(GLOBAL_EXTIPtr[EXTI14]!=STD_NULL)){
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	0b9b      	lsrs	r3, r3, #14
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf14      	ite	ne
 80004e4:	2301      	movne	r3, #1
 80004e6:	2300      	moveq	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4013      	ands	r3, r2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d009      	beq.n	8000506 <EXTI15_10_IRQHandler+0x13a>
			GLOBAL_EXTIPtr[EXTI14]();
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 80004f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f6:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI14;
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a12      	ldr	r2, [pc, #72]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000502:	6153      	str	r3, [r2, #20]
}
 8000504:	e01d      	b.n	8000542 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI15)==1)&(GLOBAL_EXTIPtr[EXTI15]!=STD_NULL)){
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	0bdb      	lsrs	r3, r3, #15
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b01      	cmp	r3, #1
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 800051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf14      	ite	ne
 8000522:	2301      	movne	r3, #1
 8000524:	2300      	moveq	r3, #0
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4013      	ands	r3, r2
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d008      	beq.n	8000542 <EXTI15_10_IRQHandler+0x176>
		GLOBAL_EXTIPtr[EXTI15]();
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <EXTI15_10_IRQHandler+0x180>)
 8000532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000534:	4798      	blx	r3
		EXTI->PR |= 1<<EXTI15;
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a03      	ldr	r2, [pc, #12]	; (8000548 <EXTI15_10_IRQHandler+0x17c>)
 800053c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000540:	6153      	str	r3, [r2, #20]
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40013c00 	.word	0x40013c00
 800054c:	2000001c 	.word	0x2000001c

08000550 <MGPIO_vSetPinMode>:
#include"MGPIO_Config.h"
#include"MGPIO_Private.h"
#include"MGPIO_int.h"


void MGPIO_vSetPinMode( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinMode){
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	460b      	mov	r3, r1
 800055c:	71bb      	strb	r3, [r7, #6]
 800055e:	4613      	mov	r3, r2
 8000560:	717b      	strb	r3, [r7, #5]

	   switch(Copy_u8PortID){
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d036      	beq.n	80005d6 <MGPIO_vSetPinMode+0x86>
 8000568:	2b02      	cmp	r3, #2
 800056a:	dc4c      	bgt.n	8000606 <MGPIO_vSetPinMode+0xb6>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <MGPIO_vSetPinMode+0x26>
 8000570:	2b01      	cmp	r3, #1
 8000572:	d018      	beq.n	80005a6 <MGPIO_vSetPinMode+0x56>
	  		   GPIOC -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
	  		   /* set the desired mode*/
	  		   GPIOC -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
	  		   break;
	   }
}
 8000574:	e047      	b.n	8000606 <MGPIO_vSetPinMode+0xb6>
		   GPIOA -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	0052      	lsls	r2, r2, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f202 	lsl.w	r2, r1, r2
 8000584:	43d2      	mvns	r2, r2
 8000586:	4611      	mov	r1, r2
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 800058a:	400b      	ands	r3, r1
 800058c:	6013      	str	r3, [r2, #0]
		   GPIOA -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7979      	ldrb	r1, [r7, #5]
 8000594:	79ba      	ldrb	r2, [r7, #6]
 8000596:	0052      	lsls	r2, r2, #1
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <MGPIO_vSetPinMode+0xc4>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	6013      	str	r3, [r2, #0]
		   break;
 80005a4:	e02f      	b.n	8000606 <MGPIO_vSetPinMode+0xb6>
	  		   GPIOB -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	79ba      	ldrb	r2, [r7, #6]
 80005ac:	0052      	lsls	r2, r2, #1
 80005ae:	2103      	movs	r1, #3
 80005b0:	fa01 f202 	lsl.w	r2, r1, r2
 80005b4:	43d2      	mvns	r2, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a17      	ldr	r2, [pc, #92]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005ba:	400b      	ands	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
	  		   GPIOB -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	7979      	ldrb	r1, [r7, #5]
 80005c4:	79ba      	ldrb	r2, [r7, #6]
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MGPIO_vSetPinMode+0xc8>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6013      	str	r3, [r2, #0]
	  		   break;
 80005d4:	e017      	b.n	8000606 <MGPIO_vSetPinMode+0xb6>
	  		   GPIOC -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MGPIO_vSetPinMode+0xcc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	79ba      	ldrb	r2, [r7, #6]
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	2103      	movs	r1, #3
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <MGPIO_vSetPinMode+0xcc>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
	  		   GPIOC -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MGPIO_vSetPinMode+0xcc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	7979      	ldrb	r1, [r7, #5]
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <MGPIO_vSetPinMode+0xcc>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6013      	str	r3, [r2, #0]
	  		   break;
 8000604:	bf00      	nop
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020400 	.word	0x40020400
 800061c:	40020800 	.word	0x40020800

08000620 <MGPIO_vSetPinValue>:
					break;
		}
		return Local_u8PinVal;
}

void MGPIO_vSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinNo ,u8 Copy_u8PinValue){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	460b      	mov	r3, r1
 800062c:	71bb      	strb	r3, [r7, #6]
 800062e:	4613      	mov	r3, r2
 8000630:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d03a      	beq.n	80006ae <MGPIO_vSetPinValue+0x8e>
 8000638:	2b02      	cmp	r3, #2
 800063a:	dc52      	bgt.n	80006e2 <MGPIO_vSetPinValue+0xc2>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <MGPIO_vSetPinValue+0x26>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d01a      	beq.n	800067a <MGPIO_vSetPinValue+0x5a>
				else
					CLR_BIT(GPIOC -> ODR , Copy_u8PinNo);
				break;

		}
}
 8000644:	e04d      	b.n	80006e2 <MGPIO_vSetPinValue+0xc2>
			if(Copy_u8PinValue == HIGH)
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d10a      	bne.n	8000662 <MGPIO_vSetPinValue+0x42>
				SET_BIT(GPIOA -> ODR , Copy_u8PinNo);
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MGPIO_vSetPinValue+0xd0>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a25      	ldr	r2, [pc, #148]	; (80006f0 <MGPIO_vSetPinValue+0xd0>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6153      	str	r3, [r2, #20]
			break;
 8000660:	e03f      	b.n	80006e2 <MGPIO_vSetPinValue+0xc2>
				CLR_BIT(GPIOA -> ODR , Copy_u8PinNo);
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MGPIO_vSetPinValue+0xd0>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	79ba      	ldrb	r2, [r7, #6]
 8000668:	2101      	movs	r1, #1
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	43d2      	mvns	r2, r2
 8000670:	4611      	mov	r1, r2
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <MGPIO_vSetPinValue+0xd0>)
 8000674:	400b      	ands	r3, r1
 8000676:	6153      	str	r3, [r2, #20]
			break;
 8000678:	e033      	b.n	80006e2 <MGPIO_vSetPinValue+0xc2>
				if(Copy_u8PinValue == HIGH)
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10a      	bne.n	8000696 <MGPIO_vSetPinValue+0x76>
					SET_BIT(GPIOB -> ODR , Copy_u8PinNo);
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MGPIO_vSetPinValue+0xd4>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <MGPIO_vSetPinValue+0xd4>)
 8000690:	430b      	orrs	r3, r1
 8000692:	6153      	str	r3, [r2, #20]
				break;
 8000694:	e025      	b.n	80006e2 <MGPIO_vSetPinValue+0xc2>
					CLR_BIT(GPIOB -> ODR , Copy_u8PinNo);
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MGPIO_vSetPinValue+0xd4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	43d2      	mvns	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MGPIO_vSetPinValue+0xd4>)
 80006a8:	400b      	ands	r3, r1
 80006aa:	6153      	str	r3, [r2, #20]
				break;
 80006ac:	e019      	b.n	80006e2 <MGPIO_vSetPinValue+0xc2>
				if(Copy_u8PinValue == HIGH)
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10a      	bne.n	80006ca <MGPIO_vSetPinValue+0xaa>
					SET_BIT(GPIOC -> ODR , Copy_u8PinNo);
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MGPIO_vSetPinValue+0xd8>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	79ba      	ldrb	r2, [r7, #6]
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <MGPIO_vSetPinValue+0xd8>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	6153      	str	r3, [r2, #20]
				break;
 80006c8:	e00a      	b.n	80006e0 <MGPIO_vSetPinValue+0xc0>
					CLR_BIT(GPIOC -> ODR , Copy_u8PinNo);
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MGPIO_vSetPinValue+0xd8>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	79ba      	ldrb	r2, [r7, #6]
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	4611      	mov	r1, r2
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <MGPIO_vSetPinValue+0xd8>)
 80006dc:	400b      	ands	r3, r1
 80006de:	6153      	str	r3, [r2, #20]
				break;
 80006e0:	bf00      	nop
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800

080006fc <MRCC_vInit>:

#include"MRCC_Config.h"
#include"MRCC_Private.h"
#include"MRCC_Int.h"

void MRCC_vInit(void){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	  CLR_SET(RCC->CFGR,SW0);
	  //Wait until HSE is used as system clock source
	  while( GET_2BITS(RCC->CFGR,SWS0) != SWS_HSE );
#elif RCC_SYS_CLK == RCC_HSI
	  //Enable Selected Clock
	  SET_BIT(RCC->CR,HSION);
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MRCC_vInit+0x48>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <MRCC_vInit+0x48>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]
	  // Wait Until HSI is ready "Clock is working properly"
	  while( !GET_BIT(RCC->CR,HSIRDY) );
 800070c:	bf00      	nop
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MRCC_vInit+0x48>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f9      	beq.n	800070e <MRCC_vInit+0x12>
	  //Select System Clock
	  CLR_2BITS(RCC->CFGR,SW0);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MRCC_vInit+0x48>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a09      	ldr	r2, [pc, #36]	; (8000744 <MRCC_vInit+0x48>)
 8000720:	f023 0303 	bic.w	r3, r3, #3
 8000724:	6093      	str	r3, [r2, #8]
	  //Wait until HSI is used as system clock source
	  while( GET_2BITS(RCC->CFGR,SWS0) != SWS_HSI );
 8000726:	bf00      	nop
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MRCC_vInit+0x48>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	089b      	lsrs	r3, r3, #2
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f8      	bne.n	8000728 <MRCC_vInit+0x2c>
		  SET_BIT(RCC->CR,PLLON);
		  // Wait Until PLL is ready "Clock is working properly"
		  while( !GET_BIT(RCC->CR,PLLRDY) );
#endif

}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <MRCC_vEnableClock>:

void MRCC_vEnableClock(PeripheralEnable_t Copy_u8PeripheralNo){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8PeripheralNo >= 96){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b5f      	cmp	r3, #95	; 0x5f
 8000756:	d90d      	bls.n	8000774 <MRCC_vEnableClock+0x2c>
		Copy_u8PeripheralNo -= 96;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	3b60      	subs	r3, #96	; 0x60
 800075c:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralNo);
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MRCC_vEnableClock+0x90>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <MRCC_vEnableClock+0x90>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
		Copy_u8PeripheralNo -= 32;
		SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralNo);
	}
	else{
		SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralNo);}
}
 8000772:	e02b      	b.n	80007cc <MRCC_vEnableClock+0x84>
	else if(Copy_u8PeripheralNo >= 64){
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b3f      	cmp	r3, #63	; 0x3f
 8000778:	d90d      	bls.n	8000796 <MRCC_vEnableClock+0x4e>
		Copy_u8PeripheralNo -= 64;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3b40      	subs	r3, #64	; 0x40
 800077e:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralNo);
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MRCC_vEnableClock+0x90>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	2101      	movs	r1, #1
 8000788:	fa01 f202 	lsl.w	r2, r1, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MRCC_vEnableClock+0x90>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000794:	e01a      	b.n	80007cc <MRCC_vEnableClock+0x84>
	else if(Copy_u8PeripheralNo >= 32){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	d90d      	bls.n	80007b8 <MRCC_vEnableClock+0x70>
		Copy_u8PeripheralNo -= 32;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	3b20      	subs	r3, #32
 80007a0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralNo);
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MRCC_vEnableClock+0x90>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <MRCC_vEnableClock+0x90>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80007b6:	e009      	b.n	80007cc <MRCC_vEnableClock+0x84>
		SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralNo);}
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MRCC_vEnableClock+0x90>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	4611      	mov	r1, r2
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <MRCC_vEnableClock+0x90>)
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <SPI1_IRQHandler>:
		u8 Local_u8ReceivedData = SPIx->DR;
		return Local_u8ReceivedData;

}

void SPI1_IRQHandler(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[0]!=STD_NULL)
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <SPI1_IRQHandler+0x3c>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	f003 0302 	and.w	r3, r3, #2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d006      	beq.n	80007fa <SPI1_IRQHandler+0x1e>
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <SPI1_IRQHandler+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <SPI1_IRQHandler+0x1e>
		SPIx_pvTxcallback[0]();
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <SPI1_IRQHandler+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4798      	blx	r3


	if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[0]!=STD_NULL)
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <SPI1_IRQHandler+0x3c>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <SPI1_IRQHandler+0x38>
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SPI1_IRQHandler+0x44>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <SPI1_IRQHandler+0x38>
		SPIx_pvRXcallback[0]();
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <SPI1_IRQHandler+0x44>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4798      	blx	r3
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40013000 	.word	0x40013000
 800081c:	2000005c 	.word	0x2000005c
 8000820:	2000006c 	.word	0x2000006c

08000824 <SPI2_IRQHandler>:

void SPI2_IRQHandler(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0



}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <SPI3_IRQHandler>:

void SPI3_IRQHandler(){
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0



}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SPI4_IRQHandler>:

void SPI4_IRQHandler(){
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0



}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MSYSTICK_vInit>:
#include"MSYSTICK_Config.h"
#include"MSYSTICK_Int.h"

static void (*GLOBAL_SYSTICK_CallBack) (void)= STD_NULL;

void MSYSTICK_vInit(void){
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

	//Clock Source
#if CLK_SOURCE == MSYSTICK_AHB8
	CLR_BIT(STK->CTRL,STK_CLK_SOURCE);
#elif CLK_SOURCE == MSYSTICK_AHB
	SET_BIT(STK->CTRL,STK_CLK_SOURCE);
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MSYSTICK_vInit+0x28>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <MSYSTICK_vInit+0x28>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6013      	str	r3, [r2, #0]
#endif
	//Clear Flag
	CLR_BIT(STK->CTRL,STK_EN);
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MSYSTICK_vInit+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <MSYSTICK_vInit+0x28>)
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <MSYSTICK_vDelayms>:
	SET_BIT(STK->CTRL,STK_INT);
	//Enable SYSTICK
	SET_BIT(STK->CTRL,STK_EN);
}

void MSYSTICK_vDelayms(u32 Copy_u32Delay){
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	//Disable INT
	CLR_BIT(STK->CTRL,STK_INT);
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 800088a:	f023 0302 	bic.w	r3, r3, #2
 800088e:	6013      	str	r3, [r2, #0]
	//Cal Value in mills sec
	Copy_u32Delay = Copy_u32Delay * 1000 * STK_CLOCK;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	607b      	str	r3, [r7, #4]
	//Load Reload Value
	STK->LOAD = Copy_u32Delay;
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6053      	str	r3, [r2, #4]
	//CLR VAL Reg
	STK->VAL = CLR;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	//Enable SYSTICK
	SET_BIT(STK->CTRL,STK_EN);
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6013      	str	r3, [r2, #0]
	//Wait Flag polling
	while(!GET_BIT(STK->CTRL,COUNT_FLAG));
 80008b4:	bf00      	nop
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <MSYSTICK_vDelayms+0x3a>
	//Disable SYSTICK
	CLR_BIT(STK->CTRL,STK_EN);
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <MSYSTICK_vDelayms+0x60>)
 80008c8:	f023 0301 	bic.w	r3, r3, #1
 80008cc:	6013      	str	r3, [r2, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <SysTick_Handler>:

void MSYSTICK_vCallBack(void(*ptr) (void)){
	GLOBAL_SYSTICK_CallBack = ptr;
}

void SysTick_Handler(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	if(GLOBAL_SYSTICK_CallBack != STD_NULL){
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Handler+0x18>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <SysTick_Handler+0x12>
		GLOBAL_SYSTICK_CallBack();
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <SysTick_Handler+0x18>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4798      	blx	r3
	}
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000007c 	.word	0x2000007c

080008fc <ICU>:
		MTIMER_CallBack(&ICU);
		SET_BIT(TIM1->CR1,CEN);// Enable timer1


}
void ICU(void){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
	static u8 x=0;
	u16 T1,T2;
	if (x ==0){
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <ICU+0x60>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10f      	bne.n	800092a <ICU+0x2e>
		T1 = TIM1->CCR[3];
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <ICU+0x64>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	80bb      	strh	r3, [r7, #4]
		SET_BIT(TIM1->CCER,13);
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <ICU+0x64>)
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <ICU+0x64>)
 8000916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800091a:	6213      	str	r3, [r2, #32]
		x++;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <ICU+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <ICU+0x60>)
 8000926:	701a      	strb	r2, [r3, #0]
	else{
		T2 = TIM1->CCR[3];
		CLR_BIT(TIM1->CCER,13);
		Time = T2 - T1;
		x=0;}
}
 8000928:	e011      	b.n	800094e <ICU+0x52>
		T2 = TIM1->CCR[3];
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <ICU+0x64>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	80fb      	strh	r3, [r7, #6]
		CLR_BIT(TIM1->CCER,13);
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <ICU+0x64>)
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <ICU+0x64>)
 8000936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800093a:	6213      	str	r3, [r2, #32]
		Time = T2 - T1;
 800093c:	88fa      	ldrh	r2, [r7, #6]
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	b29a      	uxth	r2, r3
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <ICU+0x68>)
 8000946:	801a      	strh	r2, [r3, #0]
		x=0;}
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <ICU+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000082 	.word	0x20000082
 8000960:	40010000 	.word	0x40010000
 8000964:	20000080 	.word	0x20000080

08000968 <TIM1_CC_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void){
	GLOBAL_Ptr();
}
*/

void TIM1_CC_IRQHandler(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	ICU();
 800096c:	f7ff ffc6 	bl	80008fc <ICU>
	CLR_BIT(TIM1-> SR,4);
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <TIM1_CC_IRQHandler+0x18>)
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	4a02      	ldr	r2, [pc, #8]	; (8000980 <TIM1_CC_IRQHandler+0x18>)
 8000976:	f023 0310 	bic.w	r3, r3, #16
 800097a:	6113      	str	r3, [r2, #16]
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40010000 	.word	0x40010000

08000984 <main>:
	Tog ^= 1;
}



u8 main(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	//Initialize RCC
	MRCC_vInit();
 8000988:	f7ff feb8 	bl	80006fc <MRCC_vInit>
	//Enable GPIO Clock
	MRCC_vEnableClock(GPIOA_EN);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fedb 	bl	8000748 <MRCC_vEnableClock>
	MRCC_vEnableClock(GPIOB_EN);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fed8 	bl	8000748 <MRCC_vEnableClock>
	//Enable SYSCFG
	MRCC_vEnableClock(SYSCFG_EN);
 8000998:	206e      	movs	r0, #110	; 0x6e
 800099a:	f7ff fed5 	bl	8000748 <MRCC_vEnableClock>

	//Initialize SYSTICK
	MSYSTICK_vInit();
 800099e:	f7ff ff57 	bl	8000850 <MSYSTICK_vInit>




	//Enable GPIO Clock
	MRCC_vEnableClock(GPIOC_EN);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff fed0 	bl	8000748 <MRCC_vEnableClock>
	//Set LED PIN as OUTPUT
	MGPIO_vSetPinMode(PORTC,PIN13,OUTPUT);
 80009a8:	2201      	movs	r2, #1
 80009aa:	210d      	movs	r1, #13
 80009ac:	2002      	movs	r0, #2
 80009ae:	f7ff fdcf 	bl	8000550 <MGPIO_vSetPinMode>



	while(1){

		MGPIO_vSetPinValue(PORTC,PIN13, HIGH);
 80009b2:	2201      	movs	r2, #1
 80009b4:	210d      	movs	r1, #13
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff fe32 	bl	8000620 <MGPIO_vSetPinValue>
		MSYSTICK_vDelayms(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c0:	f7ff ff5c 	bl	800087c <MSYSTICK_vDelayms>
		MGPIO_vSetPinValue(PORTC,PIN13, LOW);
 80009c4:	2200      	movs	r2, #0
 80009c6:	210d      	movs	r1, #13
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fe29 	bl	8000620 <MGPIO_vSetPinValue>
		MSYSTICK_vDelayms(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d2:	f7ff ff53 	bl	800087c <MSYSTICK_vDelayms>
		MGPIO_vSetPinValue(PORTC,PIN13, HIGH);
 80009d6:	e7ec      	b.n	80009b2 <main+0x2e>

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f000 f811 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff ffbb 	bl	8000984 <main>

08000a0e <LoopForever>:

LoopForever:
  b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a1c:	08000a94 	.word	0x08000a94
  ldr r2, =_sbss
 8000a20:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a24:	20000084 	.word	0x20000084

08000a28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4d0d      	ldr	r5, [pc, #52]	; (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	; (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2600      	movs	r6, #0
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4d0b      	ldr	r5, [pc, #44]	; (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	; (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 f818 	bl	8000a74 <_init>
 8000a44:	1b64      	subs	r4, r4, r5
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2600      	movs	r6, #0
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a54:	4798      	blx	r3
 8000a56:	3601      	adds	r6, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5e:	4798      	blx	r3
 8000a60:	3601      	adds	r6, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08000a8c 	.word	0x08000a8c
 8000a68:	08000a8c 	.word	0x08000a8c
 8000a6c:	08000a8c 	.word	0x08000a8c
 8000a70:	08000a90 	.word	0x08000a90

08000a74 <_init>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr

08000a80 <_fini>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr
